// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VitalSignServiceClient is the client API for VitalSignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VitalSignServiceClient interface {
	PushVitalSign(ctx context.Context, opts ...grpc.CallOption) (VitalSignService_PushVitalSignClient, error)
}

type vitalSignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVitalSignServiceClient(cc grpc.ClientConnInterface) VitalSignServiceClient {
	return &vitalSignServiceClient{cc}
}

func (c *vitalSignServiceClient) PushVitalSign(ctx context.Context, opts ...grpc.CallOption) (VitalSignService_PushVitalSignClient, error) {
	stream, err := c.cc.NewStream(ctx, &VitalSignService_ServiceDesc.Streams[0], "/VitalSignService/PushVitalSign", opts...)
	if err != nil {
		return nil, err
	}
	x := &vitalSignServicePushVitalSignClient{stream}
	return x, nil
}

type VitalSignService_PushVitalSignClient interface {
	Send(*VitalSign) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type vitalSignServicePushVitalSignClient struct {
	grpc.ClientStream
}

func (x *vitalSignServicePushVitalSignClient) Send(m *VitalSign) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vitalSignServicePushVitalSignClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VitalSignServiceServer is the server API for VitalSignService service.
// All implementations must embed UnimplementedVitalSignServiceServer
// for forward compatibility
type VitalSignServiceServer interface {
	PushVitalSign(VitalSignService_PushVitalSignServer) error
	mustEmbedUnimplementedVitalSignServiceServer()
}

// UnimplementedVitalSignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVitalSignServiceServer struct {
}

func (UnimplementedVitalSignServiceServer) PushVitalSign(VitalSignService_PushVitalSignServer) error {
	return status.Errorf(codes.Unimplemented, "method PushVitalSign not implemented")
}
func (UnimplementedVitalSignServiceServer) mustEmbedUnimplementedVitalSignServiceServer() {}

// UnsafeVitalSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VitalSignServiceServer will
// result in compilation errors.
type UnsafeVitalSignServiceServer interface {
	mustEmbedUnimplementedVitalSignServiceServer()
}

func RegisterVitalSignServiceServer(s grpc.ServiceRegistrar, srv VitalSignServiceServer) {
	s.RegisterService(&VitalSignService_ServiceDesc, srv)
}

func _VitalSignService_PushVitalSign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VitalSignServiceServer).PushVitalSign(&vitalSignServicePushVitalSignServer{stream})
}

type VitalSignService_PushVitalSignServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*VitalSign, error)
	grpc.ServerStream
}

type vitalSignServicePushVitalSignServer struct {
	grpc.ServerStream
}

func (x *vitalSignServicePushVitalSignServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vitalSignServicePushVitalSignServer) Recv() (*VitalSign, error) {
	m := new(VitalSign)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VitalSignService_ServiceDesc is the grpc.ServiceDesc for VitalSignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VitalSignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VitalSignService",
	HandlerType: (*VitalSignServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushVitalSign",
			Handler:       _VitalSignService_PushVitalSign_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
